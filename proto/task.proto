syntax = "proto3";

package task.v1;

option go_package = "task";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/veith/protos/rest.proto";
import "github.com/veith/protos/date.proto"; //gogogenfast compatible version of  "google/type/date.proto";



service TaskService {

    // Erstellen eines Tasks
    rpc CreateTask (CreateTaskRequest) returns (TaskEntity) {
        option (google.api.http) = {
			post: "/tasks"
			body: "item"
		};
    }

    // Laden eines Tasks
    rpc GetTask (GetTaskRequest) returns (TaskEntity) {
        option (google.api.http) = {
			get: "/tasks/{id}"
		};
    }

    // Laden aller Tasks. Es werden per default 23 Tasks pro Page gezeigt.
    rpc ListTask (ListTaskRequest) returns (TaskCollection) {
        option (google.api.http) = {
			get: "/tasks"
		};
    }

    // Einen Task löschen.
    rpc DeleteTask (DeleteTaskRequest) returns (DeleteTaskResponse) {
        option (google.api.http) = {
			delete: "/tasks/{id}"
		};
    }

    // Inhalt eines Tasks aktualisieren. Es werden nur gelieferte Felder aktualisiert. Ist eigentlich ein PATCH
    rpc UpdateTask (UpdateTaskRequest) returns (TaskEntity) {
        option (google.api.http) = {
			put: "/tasks/{id}"
			body: "item"
		};
    }

    // Benutzerdefinierte Methode um einen Task als abgeschlossen zu setzen.
    rpc CompleteTask (GetTaskRequest) returns (TaskEntity) {
        option (google.api.http) = {
			post: "/tasks/{id}:complete"
		};
    }
}


enum Complete {
    UNKNOWN = 0;
    RUNNING = 1;
    COMPLETED = 2;
}

// Task Entität
message Task {
    // Eine ULID
    string id = 1 [(gogoproto.moretags) = "db:\"id,pk,omitempty\""];
    // Titel des Tasks
    string title = 2 [(gogoproto.moretags) = "db:\"title,omitempty\""];
    // Beschreibung des Tasks
    string description = 3 [(gogoproto.moretags) = "db:\"description,omitempty\""];
    // Status des Tasks
    Complete completed = 4 [(gogoproto.moretags) = "db:\"completed\""];
    // Ablaufdatum
    google.type.Date date = 5 [(gogoproto.moretags) = "db:\"date\""];

    // Datum der Erstellung
    google.protobuf.Timestamp created_at = 100;
    // Datum der letzen Änderung
    google.protobuf.Timestamp updated_at = 101;

}

message CreateTaskRequest {
    Task item = 1;
}

message GetTaskRequest {
    string id = 1;
}

message DeleteTaskRequest {
    string id = 1;
}

message UpdateTaskRequest {
    string id = 1;
    Task item = 2;
}
// Eine Entität besteht aus dem Task und den HATEOAS Links
message TaskEntity {
    Task data = 1;
    repeated furo.type.Link links = 2;
}

// ListTaskRequest
//reserved 1 to 5;
//reserved "fields", "expands", "page", "limit", "offset","sort", "filter","count","sum","context";
message ListTaskRequest {
    // Partielle Repräsentation
    string fields = 1;
    // Sortierung nach feldern
    // **?filter=-completed** um completed absteigend zu bekommen
    // **?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    // Filtern
    string filter = 3;
    // Gewünschte Seite. Tipp: Folge dem HATEOAS
    int32 page = 4;
    // Seitengrösse
    int32 limit = 5;
    // Meta für die Anzahl der Elemente der Resource
    bool count = 6;
    // not implemented
    string sum = 7;
    // not implemented -> wird auf view geändert um conform mit google specs zu sein
    string context = 8;
    // nur abgeschlossene Tasks anzeigen
    bool not_completed = 9;
}

message TaskCollection {
    repeated TaskEntity data = 1;
    repeated furo.type.Link links = 2;
}

message DeleteTaskResponse {
}


