// Code generated by mid2proto. DO NOT EDIT.
// source repo: 

// Service Definitonen für das Modul Task 
// Zweck diese Moduls ist es sowas wie eine TO-DO Liste zu haben

syntax = "proto3";
package task; //v1

// Options 
option go_package = "task";

// Imports 
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/veith/protos/rest.proto";
import "github.com/veith/protos/date.proto";

// Services

//Manage tasks aka Todos
service TaskService {
    //Erstellen eines neuen Tasks
    rpc CreateTask (CreateTaskRequest) returns (TaskEntity) {
        option (google.api.http) = {
            post: "/tasks"
            body: "item"
        };
    }
    
    //Laden eines einzelnen Tasks
    rpc GetTask (GetTaskRequest) returns (TaskEntity) {
        option (google.api.http) = {
            get: "/tasks/{id}"
        };
    }
    
    //Laden aller Tasks. Es werden per default 23 Tasks pro Page gezeigt.
    rpc ListTask (ListTaskRequest) returns (TaskCollection) {
        option (google.api.http) = {
            get: "/tasks"
        };
    }
    
    //Löschen eines Tasks 
    //Nicht widerrufbar
    rpc DeleteTask (DeleteTaskRequest) returns (DeleteTaskResponse) {
        option (google.api.http) = {
            delete: "/tasks/{id}"
        };
    }
    
    //Inhalt eines Tasks aktualisieren. Es werden nur gelieferte Felder aktualisiert.
    rpc UpdateTask (UpdateTaskRequest) returns (TaskEntity) {
        option (google.api.http) = {
            patch: "/tasks/{id}"
            body: "item"
        };
    }
    
    //Benutzerdefinierte Methode um einen Task direkt als abgeschlossen zu setzen
    rpc CompleteTask (CompleteTaskRequest) returns (TaskEntity) {
        option (google.api.http) = {
            post: "/tasks/{id}:complete"
        };
    }
    
}



// Enums

//Unkown mit 0 ist bewusst. So können wir feststellen ob ein Wert auch wirklich gesetzt wurde 
// Neue Zeile
enum Complete {
    UNKNOWN = 0; //Zustand unbekannt oder nicht gesetzt
    RUNNING = 1; //Task läuft
    COMPLETED = 2; //Task abgeschlossen
}

// Messages

//Ein einzelner Task
message Task {
    //ulid des Tasks
    string id = 1 [(gogoproto.moretags) = "db:\"id,pk,omitempty\""];
    //Titel des Tasks
    string title = 2 [(gogoproto.moretags) = "db:\"title,omitempty\""];
    //Beschreibung des Tasks
    string description = 3 [(gogoproto.moretags) = "db:\"description,omitempty\""];
    //Status des Tasks
    Complete completed = 4 [(gogoproto.moretags) = "db:\"completed,omitempty\""];
    //Ablaufdatum
    google.type.Date date = 5 [(gogoproto.moretags) = "db:\"date,omitempty\""];
    //Datum der Erstellung
    google.protobuf.Timestamp created_at = 100;
    //Datum der letzten Änderung
    google.protobuf.Timestamp updated_at = 101;
}
//REST Entität eines Tasks
message TaskEntity {
    //enthält einen Task
    Task data = 1;
    //HATEOAS Links
    repeated furo.type.Link links = 2;
}
//REST Collection von Tasks
message TaskCollection {
    //enthält eine liste von Tasks
    repeated TaskEntity data = 1;
    //HATEOAS Links
    repeated furo.type.Link links = 2;
}
//Request Daten für die Erstellung eines Tasks
message CreateTaskRequest {
    //enthält einen Task
    Task item = 1;
}
//Request Daten für die Abfrage eines einzelnen Tasks
message GetTaskRequest {
    //ULID vom Task
    string id = 1;
}
//Request Daten für das Löschen eines Tasks
message DeleteTaskRequest {
    //ULID vom Task
    string id = 1;
}
//Request Daten für das direkte Abschliessen eines Tasks
message CompleteTaskRequest {
    //ULID vom Task
    string id = 1;
}
//Leere Antwort nach dem Löschen eines Tasks
message DeleteTaskResponse {
}
//Request Daten für das Aktualisieren eines Tasks
message UpdateTaskRequest {
    //ULID vom Task
    string id = 1;
    //enthält einen Task
    Task item = 2;
}
//Request Daten für eine Liste von Tasks mit filtern
message ListTaskRequest {
    //Partielle Repräsentation fields=id,name
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;
    //nur abgeschlossene Tasks anzeigen
    bool not_completed = 9;
}
