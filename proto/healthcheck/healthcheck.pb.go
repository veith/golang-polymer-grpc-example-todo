// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: healthcheck.proto

package healthcheck

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthCheckClient is the client API for HealthCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthCheckClient interface {
	Check(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type healthCheckClient struct {
	cc *grpc.ClientConn
}

func NewHealthCheckClient(cc *grpc.ClientConn) HealthCheckClient {
	return &healthCheckClient{cc}
}

func (c *healthCheckClient) Check(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/furoDesigner.proto.HealthCheck/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServer is the server API for HealthCheck service.
type HealthCheckServer interface {
	Check(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterHealthCheckServer(s *grpc.Server, srv HealthCheckServer) {
	s.RegisterService(&_HealthCheck_serviceDesc, srv)
}

func _HealthCheck_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/furoDesigner.proto.HealthCheck/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).Check(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "furoDesigner.proto.HealthCheck",
	HandlerType: (*HealthCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthCheck_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthcheck.proto",
}

func init() { proto.RegisterFile("healthcheck.proto", fileDescriptor_healthcheck_26f63797a377ac9f) }

var fileDescriptor_healthcheck_26f63797a377ac9f = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x48, 0x4d, 0xcc,
	0x29, 0xc9, 0x48, 0xce, 0x48, 0x4d, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a,
	0x2b, 0x2d, 0xca, 0x77, 0x49, 0x2d, 0xce, 0x4c, 0xcf, 0x4b, 0x2d, 0x82, 0x88, 0x49, 0xc9, 0xa4,
	0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27, 0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24,
	0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x65, 0xa5, 0xa1, 0xb2, 0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e,
	0x6a, 0x6e, 0x41, 0x49, 0x25, 0x44, 0xd2, 0x28, 0x96, 0x8b, 0xdb, 0x03, 0x6c, 0x87, 0x33, 0xc8,
	0x0e, 0x21, 0x3f, 0x2e, 0x56, 0x08, 0x43, 0x4c, 0x0f, 0xa2, 0x4b, 0x0f, 0xa6, 0x4b, 0xcf, 0x15,
	0xa4, 0x4b, 0x0a, 0x87, 0xb8, 0x92, 0x68, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0xf8, 0x85, 0x78, 0xf5,
	0xe3, 0x91, 0xdc, 0xec, 0x24, 0x79, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e,
	0xc9, 0x31, 0x46, 0x71, 0x23, 0x49, 0x25, 0xb1, 0x81, 0x4d, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x0d, 0xc5, 0x9c, 0x46, 0xe4, 0x00, 0x00, 0x00,
}
