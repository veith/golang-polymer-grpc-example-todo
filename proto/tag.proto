// Code generated by mid2proto. DO NOT EDIT.
// source repo: 
// 2019-01-11 17:56:51.435593 +0100 CET m=+0.003030935

// Interface Definitonen für die Entity Tags 
// Verwaltet Tags

syntax = "proto3";
package example.package; //v1

// Options 
option go_package = "tag";

// Imports 
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/veith/protos/rest.proto";
import "google/protobuf/empty.proto";

// Services

//Verwaltet Tags nach der Methode XY
service TagService {
    //Erstellt einen neuen Tag
    rpc CreateTag (CreateTagRequest) returns (TagEntity) {
        option (google.api.http) = {
            post: "/tags"
            body: "item"
        };
    }
    //Abfragen eines Tags
    rpc GetTag (GetTagRequest) returns (TagEntity) {
        option (google.api.http) = {
            get: "/tags/{id}"
        };
    }
    //Abfragen aller Tags
    rpc ListAllTags (ListTagsRequest) returns (TagCollection) {
        option (google.api.http) = {
            get: "/tags"
        };
    }
    //Abfragen aller Tags eines Tasks
    rpc ListTagsFromTask (ListTagsRequest) returns (TagCollection) {
        option (google.api.http) = {
            get: "/tasks/{task=*}/tags"
        };
    }
    //Löschen eines Tags
    rpc DeleteTag (DeleteTagRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/tags/{id}"
        };
    }
    //Aktualisert einen Tag partiell
    rpc UpdateTag (UpdateTagRequest) returns (TagEntity) {
        option (google.api.http) = {
            patch: "/tags/{id}"
            body: "item"
        };
    }
}


//Request Daten für die Abfrage eines einzelnen Tags
message GetTagRequest {
    //ULID vom Tag
    string id = 1;
}

//Request Daten für das Löschen eines Tasks
message DeleteTagRequest {
    //ULID vom Tag
    string id = 1;
}

//Request Daten für das Aktualisieren eines Tag
message UpdateTagRequest {
    //ULID vom Tag
    string id = 1;
    //enthält einen Tag
    Tag item = 2;
}

//Request Daten für die Erstellung eines Tags
message CreateTagRequest {
    //enthält einen Tag
    Tag item = 1;
}

//Tag Entitytyp. Datenmodel eines Tags
message Tag {
    //für IDs werden wir intern ulid verwenden
    string id = 1 [(gogoproto.moretags) = "db:\"id,pk,omitempty\""];
    //Taglabel wird als Standardrepräsentation verwendet.
    string label = 2 [(gogoproto.moretags) = "db:\"label,omitempty\""];
}

//Response-Message einer Anfrage nach Tags
message TagEntity {
    //Datenmodel vom Typ Tag
    Tag data = 1;
    //Hateoasinformationen
    repeated furo.type.Link links = 2;
}

//Response-Message einer List Abfrage nach Tags
message TagCollection {
    //Datenmodel vom Typ TagEntity
    repeated TagEntity data = 1;
    //Hateoasinformationen
    repeated furo.type.Link links = 2;
}

//Request Daten für eine Liste von Tags
message ListTagsRequest {
    //Partielle Repräsentation fields=id,name
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Die ulid vom übergeordnetem task
    string task = 11;
}
